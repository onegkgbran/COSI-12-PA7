/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test
    void testGet() {
        ArrayIntList l = new ArrayIntList();
        l.add(1);
        assertEquals(1, l.get(0));
    }

    @Test
    void testEqualsTrue() {
        ArrayIntList l = new ArrayIntList();
        l.add(1);
        ArrayIntList a = new ArrayIntList();
        a.add(1);
        assertEquals(l, a);
        assertEquals(l, l);
    }

    @Test
    void testEqualsFalse() {
        ArrayIntList l = new ArrayIntList();
        ArrayIntList a = new ArrayIntList();
        l.add(1);
        a.add(2);
        assertNotEquals(l, a);
    }

    @Test
    void testEqualsDifSize() {
        ArrayIntList l = new ArrayIntList();
        ArrayIntList a = new ArrayIntList();
        l.add(1);
        a.add(1);
        a.add(1);
        assertNotEquals(l, a);
    }

    @Test
    void testEqualsDifOrder() {
        ArrayIntList l = new ArrayIntList();
        ArrayIntList a = new ArrayIntList();
        l.add(1);
        l.add(2);
        a.add(2);
        a.add(1);
        assertNotEquals(l, a);
    }

    @Test
    void testEqualsDiffObj() {
        ArrayIntList l = new ArrayIntList();
        int[] i = { 1 };
        l.add(1);
        assertNotEquals(l, i);
    }

    @Test
    void testAddFull() {
        ArrayIntList l = new ArrayIntList(1);
        l.add(1);
        l.add(1);
        assertEquals(2, l.size());
        assertEquals(1, l.get(0));
        assertEquals(1, l.get(1));
    }

    @Test
    void testIndexOf() {
        ArrayIntList l = new ArrayIntList();
        l.add(1);
        assertEquals(0, l.indexOf(1));
    }

    @Test
    void testIndexOfTwice() {
        ArrayIntList l = new ArrayIntList();
        l.add(1);
        l.add(1);
        assertEquals(0, l.indexOf(1));
    }

    @Test
    void testIndexOfNotFound() {
        ArrayIntList l = new ArrayIntList();
        l.add(3);
        assertEquals(-1, l.indexOf(1));
    }

    @Test
    void testRemove() {
        ArrayIntList l = new ArrayIntList();
        l.add(3);
        l.add(4);
        l.remove(0);
        ArrayIntList a = new ArrayIntList();
        a.add(4);
        assertEquals(a, l);
    }

    @Test
    void testAddIndex() {
        ArrayIntList l = new ArrayIntList();
        l.add(3);
        l.add(4);
        l.add(0, 2);
        ArrayIntList a = new ArrayIntList();
        a.add(2);
        a.add(3);
        a.add(4);
        assertEquals(a, l);
    }

    @Test
    void testToString() {
        ArrayIntList l = new ArrayIntList();
        l.add(3);
        l.add(4);
        l.add(5);
        assertEquals("[3, 4, 5]", l.toString());
    }

    @Test
    void testClear() {
        ArrayIntList l = new ArrayIntList();
        l.add(3);
        l.add(4);
        l.add(5);
        l.clear();
        assertEquals(new ArrayIntList(), l);
    }

    @Test
    void testContainsTrue() {
        ArrayIntList l = new ArrayIntList();
        l.add(3);
        assertTrue(l.contains(3));
    }

    @Test
    void testContainsFalse() {
        ArrayIntList l = new ArrayIntList();
        l.add(3);
        assertFalse(l.contains(4));
    }

    @Test
    void testEnsureCapacity() {
        ArrayIntList l = new ArrayIntList(1);
        l.ensureCapacity(10);
        assertEquals(10,l.getInternalSize());
    }

    @Test
    void testIsEmpty() {
        ArrayIntList l = new ArrayIntList();
        assertTrue(l.isEmpty());
    }

    @Test
    void testIsNotEmpty() {
        ArrayIntList l = new ArrayIntList();
        l.add(1);
        assertFalse(l.isEmpty());
    }

    @Test
    void testSize1() {
        ArrayIntList l = new ArrayIntList();
        l.add(1);
        l.add(1);
        l.clear();
        assertEquals(0, l.size());
    }

    @Test
    void testSize2() {
        ArrayIntList l = new ArrayIntList();
        l.add(1);
        l.add(1);
        l.remove(1);
        assertEquals(1, l.size());
    }

    @Test
    void testSize3() {
        ArrayIntList l = new ArrayIntList();
        l.add(1);
        l.add(1);
        assertEquals(2, l.size());
    }

    @Test
    void testSize4() {
        ArrayIntList l = new ArrayIntList();
        assertEquals(0, l.size());
    }

}
